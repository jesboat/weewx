#!/usr/bin/python
# $Id: config_fousb.py 476 2013-02-14 14:20:11Z mwall $
#
# Copyright 2012 Matthew Wall
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.
#
# See http://www.gnu.org/licenses/
"""Command line utility for configuring Fine Offset weather stations

For now this utility is read-only - it reports all of the station settings
but does not provide a mechanism to modify them.

The station model, version, and id are supposed to be reported by these
instruments, but so far (04jan2013) my testing shows bogus values for these
fields.

If you have a Fine Offset station and use this utility, it would be helpful
to know:

1) the model, version, and id

2) the stations model as indicated on the packaging, for example
   'Ambient WS-2080', 'National Geographic 265NE, or 'Watson W8681'

Output from a 308x-series station would be particularly helpful.
"""

# TODO:
# set station archive interval

import configobj
import optparse
import time

import weewx.fousb
import weewx.units
import weeutil.weeutil

description = """Configuration utility for Fine Offset weather stations."""

usage="""%prog config_file [options]"""

epilog = """Mutating actions will request confirmation before proceeding."""

def main():

    # Create a command line parser:
    parser = optparse.OptionParser(description=description, usage=usage, epilog=epilog)
    
    # Add the various options:
    parser.add_option("--info", action="store_true", dest="info",
                      help="display weather station configuration")
    parser.add_option("--check-pressures", action="store_true", dest="chkpres",
                      help="query station for pressure sensor data")
    parser.add_option("--check-units", action="store_true", dest="chkunits",
                      help="compare raw and converted LOOP packets")
    parser.add_option("--debug", action="store_true", dest="debug",
                      help="display diagnostic information while running")

    # Now we are ready to parse the command line:
    (options, args) = parser.parse_args()
    if not args:
        parser.error("No configuration file specified")

    cfgfile = args[0]
    debug = options.debug or weewx.debug

    # Try to open up the configuration file. Declare an error if unable to.
    try :
        config_dict = configobj.ConfigObj(cfgfile, file_error=True)
    except IOError:
        print "Unable to open configuration file %s" % cfgfile
        exit(1)
    except configobj.ConfigObjError:
        print "Error wile parsing configuration file %s" % cfgfile
        exit(1)

    if debug:
        print "Using configuration file %s" % cfgfile

    # station needs altitude to do calculations
    altitude_t = weeutil.weeutil.option_as_list(config_dict['Station'].get('altitude', (None, None)))
    # form a units value-tuple
    altitude_vt = (float(altitude_t[0]), altitude_t[1], "group_altitude")
    # convert to meters
    altitude_m = weewx.units.convert(altitude_vt, 'meter')[0]
    
    if debug:
        print 'altitude from config: %s' % altitude_t
        print 'altitude tuple: %s' % altitude_vt
        print 'altitude in meters: %s' % altitude_m

    station = weewx.fousb.FineOffsetUSB(altitude=altitude_m,
                                        **config_dict['FineOffsetUSB'])

    if options.chkunits:
        checkunits(station, config_dict['StdConvert']['target_unit'])
    elif options.chkpres:
        checkpressures(station, config_dict['StdConvert']['target_unit'],
                       altitude_t[0], altitude_t[1])
    elif options.info or len(args) == 1:
        info(station)

def info(station):
    """Query the station then display the settings."""

    print "Querying the station..."
    val = getvalues(station, '', weewx.fousb.fixed_format)
    station.closePort()

    print 'Fine Offset station settings:'
    print '%s: %s' % ('local time'.rjust(30),
                      time.strftime('%Y.%m.%d %H:%M:%S %Z', time.localtime()))

    slist = {'values':[], 'minmax_values':[],
             'settings':[], 'display_settings':[], 'alarm_settings':[]}
    for x in sorted(val.keys()):
        if type(val[x]) is dict:
            for y in val[x].keys():
                label = x + '.' + y
                s = fmtparam(label, val[x][y])
                slist = stash(slist, s)
        else:
            s = fmtparam(x, val[x])
            slist = stash(slist, s)
    for k in ('values','minmax_values','settings','display_settings','alarm_settings'):
        print ''
        for s in slist[k]:
            print s

def checkpressures(station, target_unit_name, altitude_value, altitude_units):
    """Query the station then display pressure-related sensor readings."""

    target_unit = weewx.units.unit_constants[target_unit_name.upper()]
    converter = weewx.units.StdUnitConverters[target_unit]

    print "Querying the station..."
    for packet in station.genLoopPackets():
        sp = packet['pressure']
        ap = station.get_fixed_block(['abs_pressure'])
        rp = station.get_fixed_block(['rel_pressure'])
        ap1 = weewx.wxformulas.altimeter_pressure_Metric(sp, station.altitude)
        ap2 = weewx.fousb.sp2ap(sp, station.altitude)
        bp2 = weewx.fousb.sp2bp(sp, station.altitude, packet['outTemp'])
        print 'altitude: %s %s' % (altitude_value, altitude_units)
        print 'station pressure (sensor): %s' % sp
        print 'absolute pressure (fixed_block): %s' % ap
        print 'relative pressure (fixed_block): %s' % rp
        print 'altimeter pressure (davis algorithm): %s' % ap1
        print 'altimeter pressure (noaa algorithm): %s' % ap2
        print 'barometer pressure (wview algorithm): %s' % bp2
        print 'raw LOOP packet:'
        print packet
        cpkt = converter.convertDict(packet)
        print 'converted LOOP packet:'
        print cpkt
        break
    station.closePort()

def checkunits(station, target_unit_name):
    """Query the station then display raw and converted sensor readings."""

    target_unit = weewx.units.unit_constants[target_unit_name.upper()]
    converter = weewx.units.StdUnitConverters[target_unit]

    print "Querying the station..."
    for packet in station.genLoopPackets():
        print 'target_unit: %s' % target_unit_name
        print 'raw LOOP packet:'
        print packet
        print 'converted LOOP packet:'
        print converter.convertDict(packet)
        break
    station.closePort()

def stash(slist, s):
    if s.find('settings') != -1:
        slist['settings'].append(s)
    elif s.find('display') != -1:
        slist['display_settings'].append(s)
    elif s.find('alarm') != -1:
        slist['alarm_settings'].append(s)
    elif s.find('min.') != -1 or s.find('max.') != -1:
        slist['minmax_values'].append(s)
    else:
        slist['values'].append(s)
    return slist

def fmtparam(label, value):
    fmt = '%s'
    if label in weewx.fousb.datum_display_formats.keys():
        fmt = weewx.fousb.datum_display_formats[label]
    fmt = '%s: ' + fmt
    return fmt % (label.rjust(30), value)

def getvalues(station, name, value):
    values = {}
    if type(value) is tuple:
        values[name] = station.get_fixed_block(name.split('.'))
    elif type(value) is dict:
        for x in value.keys():
            n = x
            if len(name) > 0:
                n = name + '.' + x
            values.update(getvalues(station, n, value[x]))
    return values

if __name__=="__main__" :
    main()
